"use client";

import { Shield, Edit, CircleAlert, QrCode, ExternalLink } from "lucide-react";
import { Typography } from "@/components/ui/typography";
import TransactionStats from "@/components/TransactionStats";
import { Button } from "@/components/ui/button";

import { EditEscrowDetailsProps } from "./types";
import { motion } from "framer-motion";
import { useMemo } from "react";
import { toast } from "sonner";

export default function EditEscrowDetails({
  transaction,
  onCancel,
  onEdit,
  isLoading = null
}: EditEscrowDetailsProps) {
  const depositAddress = useMemo(() => {
    return ('bitcoinAddress' in transaction ? transaction.bitcoinAddress : undefined) ||
      ('depositAddress' in transaction ? transaction.depositAddress : undefined) ||
      "bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh";
  }, [transaction]);

  const totalBTC =
    Array.isArray(transaction?.to) && transaction.to.length > 0
      ? transaction.to.reduce((sum, toEntry) => sum + Number(toEntry.amount), 0) / 1e8
      : 0;

  const recipientCount = transaction?.to?.length || 0;

  return (
    <div className="container !rounded-2xl !p-6">

      <Typography variant="large" className="mb-4">Escrow overview</Typography>

      <TransactionStats
        totalBTC={totalBTC}
        recipientCount={recipientCount}
        status={transaction.status}
      />

      <hr className="my-6 text-[#424444] h-[1px]" />

      <Typography variant="large" className="text-[#FEB64D]">Funding required</Typography>

      {/* Warning Banner */}
      <div className="bg-[#48351A] border border-[#BD822D] rounded-[10px] p-4 mt-4">
        <div className="flex items-start space-x-3">
          <CircleAlert className="w-5 h-5 text-[#FEB64D] mt-0.5 flex-shrink-0" />
          <div className="space-y-2">
            <Typography variant="base" className="text-[#FEB64D] font-semibold">
              Send exactly {totalBTC.toFixed(8)} BTC to activate escrow
            </Typography>
            <Typography variant="small" className="text-white">
              This address is generated by ICP threshold ECDSA â€” no bridges, no wrap
            </Typography>
          </div>
        </div>
      </div>

      {/* Action Buttons */}
      <div className="flex gap-4 mt-6">
        <Button
          variant="outline"
          className="flex-1 border-[#7A7A7A] text-white hover:bg-[#404040] h-10"
          onClick={() => {
            // TODO: Implement QR code modal
            toast.info("QR code feature coming soon");
          }}
        >
          <QrCode className="w-4 h-4 mr-2" />
          Show QR code
        </Button>
        <Button
          variant="outline"
          className="flex-1 border-[#7A7A7A] text-white hover:bg-[#404040] h-10"
          onClick={() => {
            window.open(`https://blockstream.info/address/${depositAddress}`, '_blank');
          }}
        >
          <ExternalLink className="w-4 h-4 mr-2" />
          View on explorer
        </Button>
      </div>

      <div className="container-gray mt-6">
        <div className="flex items-start gap-3">
          <span className="bg-[#4F3F27] p-2 rounded-full">
            <Shield color="#FEB64D" />
          </span>
          <div>
            <Typography variant="base" className="text-white font-semibold">
              Fully Trustless
            </Typography>
            <Typography className="text-[#9F9F9F] mt-1">
              Escrow powered by Internet Computer&apos;s native Bitcoin integration.
              No bridge. No wrap. Fully trustless.
            </Typography>
          </div>
        </div>
      </div>

      <hr className="my-8 text-[#424444] h-[1px]" />

      {transaction.status === "pending" && !transaction.releasedAt && (onCancel || onEdit) && (
        <motion.div
          className="flex items-center gap-3 mt-4"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          {(() => {
            // Check if any recipients have taken action
            const hasRecipientAction = transaction.to?.some((recipient) =>
              recipient.status && Object.keys(recipient.status)[0] !== "pending"
            ) || false;

            return !hasRecipientAction && onEdit;
          })() && (
              <motion.div
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                transition={{ duration: 0.1 }}
              >
                <Button
                  className="bg-[#FEB64D] text-black hover:bg-[#FEB64D]/90 font-semibold h-10"
                  onClick={onEdit}
                  disabled={isLoading === "edit"}
                >
                  {isLoading === "edit" ? (
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-black mr-2" />
                  ) : (
                    <Edit size={16} className="mr-2" />
                  )}
                  {isLoading === "edit" ? "Editing..." : "Edit escrow"}
                </Button>
              </motion.div>
            )}
          {onCancel && (
            <motion.div
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              transition={{ duration: 0.1 }}
            >
              <Button
                variant="outline"
                className="border-[#7A7A7A] text-[#F64C4C] hover:bg-[#404040] h-10"
                onClick={onCancel}
                disabled={isLoading === "cancel"}
              >
                {isLoading === "cancel" ? (
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-red-500 mr-2" />
                ) : (
                  <CircleAlert size={16} className="mr-2" />
                )}
                {isLoading === "cancel" ? "Cancelling..." : "Cancel escrow"}
              </Button>
            </motion.div>
          )}
          <div className="flex items-center gap-3 ml-auto">
            <CircleAlert size={20} className="text-[#FEB64D]" />
            <Typography variant="small" className="text-white">
              This action cannot be undone.
            </Typography>
          </div>
        </motion.div>
      )}
    </div>
  );
} 