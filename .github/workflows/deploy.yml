name: CI/CD Build and Deploy to EC2

on:
  push:
    branches: [development]
  pull_request:
    branches: [development]
    types: [closed]
  workflow_dispatch: # Manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.17.0'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

  build-and-push-ecr:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/development' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repository if it doesn't exist
        run: |
          REPO_NAME="splitsafe-development"
          echo "üîç Checking if ECR repository $REPO_NAME exists..."
          
          if ! aws ecr describe-repositories --repository-names $REPO_NAME --region us-east-1 2>/dev/null; then
            echo "üì¶ Creating ECR repository $REPO_NAME..."
            aws ecr create-repository \
              --repository-name $REPO_NAME \
              --region us-east-1 \
              --image-scanning-configuration scanOnPush=true \
              --image-tag-mutability MUTABLE
            echo "‚úÖ ECR repository $REPO_NAME created successfully"
          else
            echo "‚úÖ ECR repository $REPO_NAME already exists"
          fi

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: splitsafe-development
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "üê≥ Building Docker image..."
          docker buildx create --use
          docker buildx build --platform linux/amd64 \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -f docker/development/Dockerfile \
            --push .
          
          # Verify the image was pushed successfully
          echo "üîç Verifying image was pushed successfully..."
          if aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=$IMAGE_TAG --region us-east-1 2>/dev/null; then
            echo "‚úÖ Image pushed and verified: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          else
            echo "‚ùå Failed to verify image in ECR: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
            echo "üîç Available images in repository:"
            aws ecr describe-images --repository-name $ECR_REPOSITORY --region us-east-1 --query 'imageDetails[*].imageTags' --output table || echo "No images found"
            exit 1
          fi

  deploy:
    needs: [build, build-and-push-ecr]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/development' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Install network tools
        run: |
          sudo apt-get update
          sudo apt-get install -y netcat-openbsd

      - name: Add EC2 to known hosts
        run: |
          echo "üîç Testing connectivity to EC2 host..."
          echo "Host: ${{ secrets.EC2_HOST }}"
          echo "Port: ${{ secrets.EC2_PORT }}"
          
          # Test SSH port connectivity (skip ping as many EC2 instances block ICMP)
          if ! nc -z -w5 ${{ secrets.EC2_HOST }} ${{ secrets.EC2_PORT }}; then
            echo "‚ùå Cannot connect to ${{ secrets.EC2_HOST }}:${{ secrets.EC2_PORT }}"
            echo "üîç This could be due to:"
            echo "   - Incorrect EC2_HOST secret"
            echo "   - Incorrect EC2_PORT secret"
            echo "   - EC2 instance is down"
            echo "   - Security group blocking SSH"
            exit 1
          fi
          
          echo "‚úÖ SSH port is accessible, attempting SSH key scan..."
          
          # Try ssh-keyscan with different options
          if ! ssh-keyscan -H -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts 2>/dev/null; then
            echo "‚ö†Ô∏è ssh-keyscan failed, trying without port specification..."
            if ! ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts 2>/dev/null; then
              echo "‚ùå Failed to add host to known_hosts"
              echo "üîç Attempting manual SSH connection test..."
              ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'" || {
                echo "‚ùå SSH connection failed"
                exit 1
              }
            fi
          fi
          
          echo "‚úÖ Host added to known_hosts successfully"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy to EC2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: splitsafe-development
          IMAGE_TAG: ${{ github.sha }}
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            echo "üöÄ Starting deployment..."
            
            # Check if Docker and AWS CLI are available, reload environment if needed
            echo "üîç Checking Docker and AWS CLI availability..."
            
            # Reload environment and check Docker
            source ~/.bashrc
            if ! command -v docker &> /dev/null; then
              echo "‚ùå Docker not found in PATH, checking if installed..."
              if [ -f /usr/bin/docker ]; then
                echo "üê≥ Docker binary exists, adding to PATH..."
                export PATH=$PATH:/usr/bin
              else
                echo "üê≥ Installing Docker..."
                sudo apt-get update
                sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                sudo apt-get update
                sudo apt-get install -y docker-ce docker-ce-cli containerd.io
                sudo usermod -aG docker $USER
              fi
            else
              echo "‚úÖ Docker available"
            fi
            
            # Check AWS CLI
            if ! command -v aws &> /dev/null; then
              echo "‚ùå AWS CLI not found in PATH, checking if installed..."
              if [ -f /usr/local/bin/aws ]; then
                echo "‚òÅÔ∏è AWS CLI binary exists, adding to PATH..."
                export PATH=$PATH:/usr/local/bin
              else
                echo "‚òÅÔ∏è Installing AWS CLI..."
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                sudo ./aws/install
                rm -rf awscliv2.zip aws
              fi
            else
              echo "‚úÖ AWS CLI available"
            fi
            
            # Ensure docker group membership is active
            newgrp docker 2>/dev/null || true
            
            # Create project directory if it doesn't exist
            echo "üìÅ Setting up project directory..."
            mkdir -p ${{ secrets.EC2_PROJECT_DIR }}
            cd ${{ secrets.EC2_PROJECT_DIR }}
            
            # Clone repository if it doesn't exist, otherwise pull latest changes
            if [ ! -d ".git" ]; then
              echo "üì• Cloning repository..."
              git clone https://github.com/${{ github.repository }}.git .
            else
              echo "üì• Pulling latest changes..."
              git pull origin ${{ github.ref_name }}
            fi
            
            # Set environment variable for canister ID
            export CANISTER_ID=${{ secrets.CANISTER_ID }}
            
            # Login to ECR
            echo "üîê Logging into ECR..."
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            
            # Check if image exists in ECR before pulling
            echo "üîç Checking if image exists in ECR..."
            IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/splitsafe-development:${{ github.sha }}"
            
            if ! aws ecr describe-images --repository-name splitsafe-development --image-ids imageTag=${{ github.sha }} --region us-east-1 2>/dev/null; then
              echo "‚ùå Image $IMAGE_URI does not exist in ECR!"
              echo "üîç Available images in repository:"
              aws ecr describe-images --repository-name splitsafe-development --region us-east-1 --query 'imageDetails[*].imageTags' --output table || echo "No images found"
              exit 1
            fi
            
            # Pull latest image from ECR
            echo "üì• Pulling latest image from ECR..."
            docker pull $IMAGE_URI
            
            # Stop existing container
            echo "üõë Stopping existing container..."
            docker stop splitsafe-development || true
            docker rm splitsafe-development || true
            
            # Run new container
            echo "üöÄ Starting new container..."
            docker run -d \
              --name splitsafe-development \
              -p 3000:3000 \
              -e CANISTER_ID=${{ secrets.CANISTER_ID }} \
              $IMAGE_URI
            
            # Start dfx server for Internet Computer integration
            echo "üîó Starting dfx server..."
            cd ~/splitsafe/icp
            dfx start --clean --background || true
            echo "‚úÖ dfx server started"
            
            # Deploy canisters if needed
            echo "üì¶ Deploying canisters..."
            dfx deploy --network=local || echo "‚ö†Ô∏è Canister deployment skipped (may already be deployed)"
            
            echo "‚úÖ Deployment completed successfully!"
            echo "üåê Application should be accessible at http://${{ secrets.EC2_HOST }}:3000"
            echo "üîó dfx server running for ICP integration"
          EOF

      - name: Health check
        run: |
          sleep 60
          curl -f http://${{ secrets.EC2_HOST }}:3000 || exit 1

      - name: Check dfx status
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "üîç Checking dfx status..."
            cd ~/splitsafe/icp
            dfx status || echo "‚ö†Ô∏è dfx status check failed"
            echo "‚úÖ dfx status check completed"
          EOF

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Deployment to EC2 completed successfully!"
          echo "üåê Application URL: http://${{ secrets.EC2_HOST }}:3000"
          echo "üê≥ Image: ${{ steps.login-ecr.outputs.registry }}/splitsafe-development:${{ github.sha }}"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment to EC2 failed!"
          echo "Please check the logs for more details." 