type TransactionStatus = 
 variant {
   cancelled;
   completed;
   pending;
   released;
 };
type Transaction = 
 record {
   from: principal;
   isRead: bool;
   status: TransactionStatus;
   timestamp: nat;
   to: vec ToEntry;
 };
type ToEntry = 
 record {
   amount: nat;
   name: text;
   "principal": principal;
 };
type SplitDApp = 
 service {
   cancelSplit: (caller: principal) -> ();
   getAdmin: () -> (principal) query;
   getBalance: (p: principal) -> (nat) query;
   getLogs: () -> (vec text) query;
   getName: (p: principal) -> (opt text) query;
   getPending: (caller: principal) -> (vec PendingTransfer) query;
   getTransactions: (p: principal) -> (vec Transaction) query;
   initiateSplit: (caller: principal, participants: vec ParticipantShare) ->
    ();
   markTransactionsAsRead: (caller: principal) -> ();
   releaseSplit: (caller: principal) -> (vec ToEntry);
   setInitialBalance: (p: principal, amount: nat, caller: principal) -> ();
   setName: (p: principal, name: text) -> ();
 };
type PendingTransfer = 
 record {
   amount: nat;
   initiatedAt: nat;
   name: text;
   to: principal;
 };
type ParticipantShare = 
 record {
   amount: nat;
   "principal": principal;
 };
service : (admin: principal) -> SplitDApp
