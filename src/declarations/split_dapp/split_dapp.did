type TransactionStatus = text;
type Transaction = 
 record {
   bitcoinAddress: opt text;
   bitcoinTransactionHash: opt text;
   cancelledAt: opt nat;
   confirmedAt: opt nat;
   createdAt: nat;
   from: principal;
   id: text;
   readAt: opt nat;
   refundedAt: opt nat;
   releasedAt: opt nat;
   status: TransactionStatus;
   title: text;
   to: vec ToEntry;
 };
type ToEntry = 
 record {
   amount: nat;
   approvedAt: opt nat;
   bitcoinAddress: opt text;
   declinedAt: opt nat;
   name: text;
   percentage: nat;
   "principal": principal;
   readAt: opt nat;
   status: variant {
             approved;
             declined;
             noaction;
             pending;
           };
 };
type Subaccount = blob;
type SplitDApp = 
 service {
   addBitcoinBalance: (caller: principal, user: principal, amount: nat) ->
    (bool);
   canUserCreateEscrow: (user: principal) -> (bool) query;
   cancelSplit: (caller: principal) -> ();
   convertIcpToBitcoin: (caller: principal, user: principal, icpAmount:
    nat) -> (bool);
   getAdmin: () -> (principal) query;
   getAllNicknames: () -> (vec record {
                                 principal;
                                 text;
                               }) query;
   getBalance: (p: principal) -> (nat) query;
   getBitcoinAddress: (user: principal) -> (opt text) query;
   getCkbtcBalance: (user: principal) -> (variant {
                                            err: text;
                                            ok: nat;
                                          });
   getCkbtcBalanceAnonymous: () -> (variant {
                                      err: text;
                                      ok: nat;
                                    });
   getCustomNickname: ("principal": principal) -> (opt text) query;
   getFraudHistory: (user: principal) -> (vec FraudActivity) query;
   getNickname: (p: principal) -> (opt text) query;
   getReputationStats: (user: principal) ->
    (record {
       canCreateEscrow: bool;
       fraudCount: nat;
       isFlagged: bool;
       reputation: nat;
     }) query;
   getTransaction: (id: text, caller: principal) -> (opt Transaction);
   getTransactionsPaginated: (p: principal, page: nat, pageSize: nat) ->
    (record {
       totalCount: nat;
       totalPages: nat;
       transactions: vec Transaction;
     });
   getUserBitcoinBalance: (user: principal) -> (nat) query;
   getUserReputationScore: (user: principal) -> (nat) query;
   initiateEscrow: (caller: principal, participants: vec ParticipantShare,
    title: text) -> (text);
   isUserFlaggedForFraud: (user: principal) -> (bool) query;
   markTransactionsAsRead: (caller: principal) -> ();
   recipientApproveEscrow: (sender: principal, txId: text, recipient:
    principal) -> ();
   recipientDeclineEscrow: (sender: principal, idx: nat, recipient:
    principal) -> ();
   recipientMarkAsReadBatch: (transactionIds: vec text, recipientId:
    principal) -> ();
   refundSplit: (caller: principal) -> ();
   releaseSplit: (caller: principal, txId: text) -> ();
   removeBitcoinAddress: (caller: principal) -> (bool);
   removeNickname: ("principal": principal) -> ();
   requestCkbtcWallet: () ->
    (variant {
       err: text;
       ok: record {
             btcAddress: text;
             owner: principal;
             subaccount: Subaccount;
           };
     });
   requestCkbtcWalletAnonymous: () ->
    (variant {
       err: text;
       ok: record {
             btcAddress: text;
             owner: principal;
             subaccount: Subaccount;
           };
     });
   resetUserReputation: (user: principal, caller: principal) -> ();
   setBitcoinAddress: (caller: principal, address: text) -> (bool);
   setBitcoinBalance: (caller: principal, user: principal, amount: nat) ->
    (bool);
   setCustomNickname: ("principal": principal, nickname: text) -> ();
   setInitialBalance: (p: principal, amount: nat, caller: principal) -> ();
   setMockBitcoinBalance: ("principal": principal, amount: nat) -> ();
   setNickname: (p: principal, name: text) -> ();
   updateEscrow: (caller: principal, txId: text, updatedParticipants:
    vec ParticipantShare) -> ();
   withdrawBtc: (caller: principal, amount: nat, recipientAddress: text) ->
    (variant {
       err: text;
       ok: text;
     });
   withdrawIcp: (caller: principal, amount: nat, recipientAddress: text) ->
    (variant {
       err: text;
       ok: text;
     });
 };
type ParticipantShare = 
 record {
   amount: nat;
   nickname: text;
   percentage: nat;
   "principal": principal;
 };
type FraudActivity = 
 record {
   activityType: text;
   timestamp: int;
   transactionId: text;
 };
service : (admin: principal, _ckbtcCanisterId: text) -> SplitDApp
