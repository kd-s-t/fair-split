name: CI/CD Build and Deploy to EC2

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run tests
        run: |
          cd frontend
          npm run test:ci

      - name: Build application
        run: |
          cd frontend
          npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Add EC2 to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            echo "🚀 Starting deployment..."
            
            # Navigate to project directory
            cd ${{ secrets.EC2_PROJECT_DIR }}
            
            # Pull latest changes
            echo "📥 Pulling latest changes..."
            git pull origin main
            
            # Set environment variable for canister ID
            export CANISTER_ID=${{ secrets.CANISTER_ID }}
            
            # Deploy with Docker Compose (from project root)
            echo "🐳 Deploying with Docker Compose..."
            docker compose -f frontend/docker/docker-compose.yml up --build -d splitsafe
            
            echo "✅ Deployment completed successfully!"
            echo "🌐 Application should be accessible at http://${{ secrets.EC2_HOST }}:3000"
          EOF

      - name: Health check
        run: |
          sleep 60
          curl -f http://${{ secrets.EC2_HOST }}:3000 || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Deployment to EC2 completed successfully!"
          echo "🌐 Application URL: http://${{ secrets.EC2_HOST }}:3000"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Deployment to EC2 failed!"
          echo "Please check the logs for more details." 