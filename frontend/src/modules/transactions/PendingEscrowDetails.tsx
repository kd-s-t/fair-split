"use client";

import { Copy, Shield, CircleX, CircleAlert } from "lucide-react";
import { Typography } from "@/components/ui/typography";
import { TransactionStats } from "@/components/ui/transaction-stats";
import { Button } from "@/components/ui/button";
import { TransactionHash } from "@/components/ui/transaction-hash";
import { PendingEscrowDetailsProps } from "./types";
import RecipientsList from "./RecipientsList";
import TimeRemaining from "./TimeRemaining";
import { motion } from "framer-motion";

export default function PendingEscrowDetails({ 
  transaction, 
  onCancel 
}: PendingEscrowDetailsProps) {
  const depositAddress = transaction?.depositAddress ||
    Array.from({ length: 42 }, () => Math.floor(Math.random() * 16).toString(16)).join("");

  const totalBTC =
    Array.isArray(transaction?.to) && transaction.to.length > 0
      ? transaction.to.reduce((sum, toEntry) => sum + Number(toEntry.amount), 0) / 1e8
      : 0;

  const recipientCount = transaction?.to?.length || 0;

  return (
    <>
      <TransactionStats 
        totalBTC={totalBTC}
        recipientCount={recipientCount}
        status={transaction.status}
      />

      <TimeRemaining createdAt={transaction.createdAt} />

      <hr className="my-10 text-[#424444] h-[1px]" />

      <RecipientsList recipients={transaction.to || []} />

      <hr className="my-6 text-[#424444] h-[1px]" />

      <Typography variant="large" className="text-[#FEB64D]">Funding required</Typography>

      <Typography variant="small" className="text-[#fff] font-semibold">
        Bitcoin deposit address
      </Typography>
      <div className="grid grid-cols-12 gap-3 mt-2">
        <div className="container-gray col-span-11 break-all">
          {depositAddress}
        </div>
        <div className="container-gray cursor-pointer">
          <Copy />
        </div>
      </div>

      {/* Bitcoin Address Block Explorer Links */}
      <div className="flex gap-2 mt-2">
        <button 
          onClick={() => window.open(`${process.env.NEXT_PUBLIC_BLOCKSTREAM_URL || 'https://blockstream.info'}/address/${depositAddress}`, '_blank')}
          className="text-[#4F3F27] hover:text-[#FEB64D] text-sm underline"
        >
          View on Blockstream
        </button>
        <button 
          onClick={() => window.open(`${process.env.NEXT_PUBLIC_MEMPOOL_URL || 'https://mempool.space'}/address/${depositAddress}`, '_blank')}
          className="text-[#4F3F27] hover:text-[#FEB64D] text-sm underline"
        >
          View on Mempool
        </button>
      </div>

      {/* ICP Transaction Hash */}
      <TransactionHash
        title="ICP Transaction Hash"
        hash={transaction.id}
        description="Internet Computer transaction hash for this escrow"
        explorerLinks={[
          {
            label: "View on ICP Dashboard",
            url: `${process.env.NEXT_PUBLIC_ICP_DASHBOARD_URL || 'https://dashboard.internetcomputer.org'}/canister/${transaction.id}`
          },
          {
            label: "View on ICScan",
            url: `${process.env.NEXT_PUBLIC_ICSCAN_URL || 'https://icscan.io'}/canister/${transaction.id}`
          }
        ]}
      />

      {/* Bitcoin Transaction Hash */}
      {transaction.bitcoinTransactionHash && (
        <TransactionHash
          title="Bitcoin Transaction Hash"
          hash={transaction.bitcoinTransactionHash}
          description="Real Bitcoin transaction detected and confirmed"
          explorerLinks={[
            {
              label: "View on Blockstream",
              url: `${process.env.NEXT_PUBLIC_BLOCKSTREAM_URL || 'https://blockstream.info'}/tx/${transaction.bitcoinTransactionHash}`
            },
            {
              label: "View on Mempool",
              url: `${process.env.NEXT_PUBLIC_MEMPOOL_URL || 'https://mempool.space'}/tx/${transaction.bitcoinTransactionHash}`
            }
          ]}
        />
      )}

      <div className="container-primary mt-4">
        <Typography variant="p" className="text-[#FEB64D] font-semibold">
          Send exactly {totalBTC.toFixed(8)} BTC to activate escrow
        </Typography>
        <Typography variant="p" className="text-white">
          This address is generated by ICP threshold ECDSA â€” no bridges, no wrap
        </Typography>
      </div>

      <div className="container-gray mt-6">
        <div className="flex items-start gap-3">
          <span className="bg-[#4F3F27] p-2 rounded-full">
            <Shield color="#FEB64D" />
          </span>
          <div>
            <Typography variant="base" className="text-white font-semibold">
              Fully Trustless
            </Typography>
            <Typography className="text-[#9F9F9F] mt-1">
              Escrow powered by Internet Computer&apos;s native Bitcoin integration.
              No bridge. No wrap. Fully trustless.
            </Typography>
          </div>
        </div>
      </div>

      <hr className="my-8 text-[#424444] h-[1px]" />

      {transaction.status === "pending" && !transaction.releasedAt && onCancel && (
        <motion.div 
          className="flex items-center gap-4 mt-4"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          <motion.div
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            transition={{ duration: 0.1 }}
          >
            <Button 
              variant="outline" 
              className="gap-2 text-[#F64C4C] !border-[#303434] !bg-transparent hover:!border-[#F64C4C] hover:!bg-[#F64C4C]/10"
              onClick={onCancel}
            >
              <motion.div
                animate={{ rotate: [0, -10, 10, 0] }}
                transition={{ duration: 0.6, repeat: Infinity, repeatDelay: 2 }}
              >
                <CircleX size={16} />
              </motion.div>
              Cancel escrow
            </Button>
          </motion.div>
          <motion.div 
            className="flex items-center gap-2"
            initial={{ opacity: 0, x: -10 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5, delay: 0.4 }}
          >
            <motion.div
              animate={{ scale: [1, 1.1, 1] }}
              transition={{ duration: 2, repeat: Infinity }}
            >
              <CircleAlert size={16} color="#FEB64D" />
            </motion.div>
            <Typography variant="small" className="text-white font-normal">
              This action cannot be undone. Only available while pending.
            </Typography>
          </motion.div>
        </motion.div>
      )}
    </>
  );
}
