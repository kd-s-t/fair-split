type TransactionStatus = text;
type Transaction = 
 record {
   from: principal;
   id: text;
   isRead: bool;
   releasedAt: opt nat;
   status: TransactionStatus;
   timestamp: nat;
   title: text;
   to: vec ToEntry;
 };
type ToEntry = 
 record {
   amount: nat;
   name: text;
   "principal": principal;
   status: variant {
             approved;
             declined;
             pending;
           };
 };
type SplitDApp = 
 service {
   cancelSplit: (caller: principal) -> ();
   getAdmin: () -> (principal) query;
   getBalance: (p: principal) -> (nat) query;
   getNickname: (p: principal) -> (opt text) query;
   getTransaction: (id: text, caller: principal) -> (opt Transaction);
   getTransactionsPaginated: (p: principal, page: nat, pageSize: nat) ->
    (record {
       totalCount: nat;
       totalPages: nat;
       transactions: vec Transaction;
     });
   initiateEscrow: (caller: principal, participants: vec ParticipantShare,
    title: text) -> (text);
   markTransactionsAsRead: (caller: principal) -> ();
   recipientApproveEscrow: (sender: principal, txId: text, recipient:
    principal) -> ();
   recipientDeclineEscrow: (sender: principal, idx: nat, recipient:
    principal) -> ();
   releaseSplit: (caller: principal, txId: text) -> ();
   setInitialBalance: (p: principal, amount: nat, caller: principal) -> ();
   setNickname: (p: principal, name: text) -> ();
 };
type ParticipantShare = 
 record {
   amount: nat;
   "principal": principal;
 };
service : (admin: principal) -> SplitDApp
